#line 2 "lex.rib.cpp"

#line 4 "lex.rib.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer rib_create_buffer
#define yy_delete_buffer rib_delete_buffer
#define yy_flex_debug rib_flex_debug
#define yy_init_buffer rib_init_buffer
#define yy_flush_buffer rib_flush_buffer
#define yy_load_buffer_state rib_load_buffer_state
#define yy_switch_to_buffer rib_switch_to_buffer
#define yyin ribin
#define yyleng ribleng
#define yylex riblex
#define yylineno riblineno
#define yyout ribout
#define yyrestart ribrestart
#define yytext ribtext
#define yywrap ribwrap
#define yyalloc riballoc
#define yyrealloc ribrealloc
#define yyfree ribfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE ribrestart(ribin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t ribleng;

extern FILE *ribin, *ribout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up ribtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up ribtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via ribrestart()), so that the user can continue scanning by
	 * just pointing ribin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when ribtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t ribleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow ribwrap()'s to do buffer switches
 * instead of setting up a fresh ribin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void ribrestart (FILE *input_file  );
void rib_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE rib_create_buffer (FILE *file,int size  );
void rib_delete_buffer (YY_BUFFER_STATE b  );
void rib_flush_buffer (YY_BUFFER_STATE b  );
void ribpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void ribpop_buffer_state (void );

static void ribensure_buffer_stack (void );
static void rib_load_buffer_state (void );
static void rib_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER rib_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE rib_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE rib_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE rib_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *riballoc (yy_size_t  );
void *ribrealloc (void *,yy_size_t  );
void ribfree (void *  );

#define yy_new_buffer rib_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        ribensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rib_create_buffer(ribin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        ribensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rib_create_buffer(ribin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ribwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *ribin = (FILE *) 0, *ribout = (FILE *) 0;

typedef int yy_state_type;

extern int riblineno;

int riblineno = 1;

extern char *ribtext;
#define yytext_ptr ribtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up ribtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	ribleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[880] =
    {   0,
      117,  117,  125,  124,  119,  122,  124,  121,  117,  124,
      117,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  114,  115,  123,    0,  116,  121,  120,    0,  117,
        0,  117,  118,  117,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  117,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  120,

      118,  117,    0,    0,  117,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  117,    0,
        0,  118,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   75,    0,    0,    0,    0,    0,    0,    0,

        0,   79,    0,  109,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   57,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  113,    0,
        0,    0,    0,   69,    0,   42,    0,   29,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   23,    0,    0,    0,
      107,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       41,    0,    0,    0,    0,    0,    0,    0,   70,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   56,    0,    0,    0,   49,    0,    0,    0,    0,
        0,   80,    0,    0,    0,    0,    0,    0,    0,    0,
       84,    0,    0,    0,    0,    0,    0,   81,    0,    0,
        0,    0,   43,    0,  108,    0,    0,    0,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   19,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   26,    0,    0,    0,    0,    0,    0,    0,   82,
        0,    0,    0,    0,    0,    0,    0,    0,   55,    0,

        0,    0,    0,    0,   74,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
       21,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  106,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   72,    0,    0,    0,   30,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   65,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   14,    0,    0,
        0,   35,    0,    0,    0,    0,  112,    0,    0,    0,
        0,    0,    0,    0,    0,   11,    0,    0,    0,    0,

        0,   76,    0,    0,    0,    0,    0,    0,   18,   38,
        0,    0,    3,    0,    0,   85,    0,   50,    0,   37,
        0,    0,   96,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   20,    0,    0,  103,    0,    0,    0,
        0,    0,   88,    0,    0,    0,    0,    0,    0,    5,
        0,    0,    0,    0,    0,   64,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   93,    0,   90,    0,    0,    0,   71,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   51,   54,   73,
        0,    0,  102,    0,    0,   36,    0,    0,    0,    0,
        0,    0,    0,    9,    0,    0,    0,    0,    0,    0,
        0,    2,    0,    0,    0,    0,   34,    0,    0,    0,
        0,   99,    0,    0,    0,    0,    0,   78,    0,    0,
        0,    0,    0,    0,   86,   10,    0,    0,    0,    0,
        0,    0,    0,    0,   87,    0,    0,    0,    0,    4,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       58,    0,   44,    0,    0,    0,    0,    0,    0,    0,

       77,   32,    0,    0,    0,   94,   92,   89,    0,   47,
       53,   17,    0,    0,    0,    0,    0,    0,    0,  105,
        0,    0,    0,   39,    0,    0,    0,    0,  101,    0,
        0,    0,   28,    0,   24,    0,    0,    0,   13,   59,
        0,  111,    0,    0,    0,    0,   95,    0,    0,    0,
       16,    0,    0,    0,    0,    0,    0,    0,    0,    8,
        0,    0,    0,    0,   63,  100,    0,    0,   12,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       15,    0,    0,    0,  110,    0,  104,    0,    0,    0,
        0,    0,    0,   27,    0,    0,    0,   22,    0,   66,

        0,    0,    0,    0,   91,    0,   67,   25,    0,    0,
        0,    0,   62,   33,   52,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   83,    0,   60,    0,    7,
        0,    0,    0,    0,    0,    0,    0,    0,   61,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   48,    0,   31,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   40,    0,    0,    0,
        0,   68,   45,    0,    0,   97,   46,   98,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    7,    1,    7,    8,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    1,    1,
        1,    1,    1,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,    1,   37,    1,    1,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   64
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[884] =
    {   0,
        0,    0, 1749, 1773, 1773, 1773, 1743, 1743,   57, 1737,
       59,   43,   59,   91,   60,   83,   62,   61,   61,  141,
       59,  103,   51,  120,  183,   61,  106,  227,  115,   80,
       72, 1773, 1773, 1773, 1737, 1773,    0,    0,  590,  152,
       75,  160,  162,  169,   78,  173,  159,  109,  127,  122,
      150,  182,  148,  159,  168,  183,  171,  589,  582,  190,
      193,  203,  195,  220,  218,  224,  218,  235,  248,  232,
      244,  226,  245,  264,  234,  239,  247,  266,  250,  259,
      247,  245,  279,  274,  289,  301,  274,  297,  300,  292,
      294,  288,  296,  307,  282,  290,  330,  292,  315,    0,

      335,  345,  119,  311,  292,  334,  345,  332,  334,  345,
      353,  342,  341,  343,  357,  345,  348,  343,  357,  357,
      356,  352,  372,  365,  372,  364,  372,  384,  382,  383,
      393,  389,  398,  401,  394,  405,  397,  391,  406,  409,
      408,  413,  399,  411,  420,  417,  422,  418,  423,  428,
      429,  414,  430,  423,  418,  442,  437,  450,  457,  444,
      457,  463,  454,  462,  464,  449,  465,  449,  465,  470,
      472,  471,  458,  460,  469,  471,  466,  476,  510,  215,
      210,  141,  480,  479,  474,  490,  482,  505,  504,  498,
      500,  519, 1773,  518,  500,  519,  511,  525,  510,  522,

      522, 1773,  520,  524,  516,  518,  520,  538,  535,  523,
      539,  527,  529,  529,  548,  553,  550,  559,  552,  551,
      598,  569,  561,  558,  576,  571,  566,  570,  584,  579,
      572,  581,  574,  588,  591,  592,  583,  604,  591,  592,
      601,  600,  621,  622,  621,  612,  615, 1773,  631,  618,
      628,  639,  621,  624,  625,  646,  641,  647,  126,  630,
      644,  640,  655, 1773,  634, 1773,  652,  647,  647,  664,
      660,  655,  671,  658,  669,  671,  676,  689,  685,  684,
      672,  687,  678,  704,  698,  680, 1773,  705,  699,  703,
     1773,  704,  697,  708,  703,  711,  702,  724,  722,  726,

     1773,  724,  736,  722,  724,  732,  727,  733,  736,  747,
      749,  735,  741,  757,  759,  754,  746,  756,  751,  754,
      773, 1773,  765,  767,  780, 1773,  793,  781,  765,  785,
      776, 1773,  796,  779,  788,  815,  799,  798,  802,  790,
     1773,  798,  817,  799,  807,  799,  811, 1773,  822,  824,
      833,  829,  819,  839, 1773,  840,  825,  829, 1773,  831,
      846,  840,  844,  840,  844,  840,  847,  852, 1773,  852,
      853,  864,  861,  873,  856,  876,  856,  888,  873,  905,
      858, 1773,  884,  879,  892,  895,  890,  899,  905,  908,
      898,  895,  897,  894,  919,  901,  926,  925, 1773,  908,

      925,  915,  931,  923, 1773,  930,  936,  941,  932,  948,
      935,  940,  950,  942,  961,  954,  963,  950,  964,  959,
      955,  975,  959,  976,  967, 1773,  966,  981,  987,  984,
      989,  979,  990,  979,  986,  996, 1001,  993, 1001,  999,
      987, 1773, 1017, 1001, 1001, 1021, 1011, 1023, 1017, 1028,
     1014, 1030, 1022, 1773, 1036, 1028, 1029, 1773, 1024, 1030,
     1029, 1029, 1039, 1040, 1040, 1054, 1046, 1773, 1047, 1057,
     1062, 1060, 1069, 1070, 1063, 1071, 1073, 1773, 1076, 1080,
     1066, 1773, 1085, 1072, 1072, 1075, 1773, 1091, 1095, 1095,
     1087, 1099, 1085, 1089, 1104, 1098, 1099, 1116, 1101, 1102,

     1108, 1773, 1115, 1121, 1117, 1121, 1128, 1134, 1773, 1773,
     1134, 1131, 1773, 1126, 1141, 1773, 1131, 1773, 1127, 1773,
     1130, 1142, 1773, 1148, 1140, 1141, 1136, 1153, 1157, 1156,
     1161, 1151, 1162, 1164, 1169, 1169, 1159, 1164, 1177, 1173,
     1178, 1191, 1179, 1773, 1186, 1192, 1195, 1184, 1189, 1190,
     1208, 1201, 1773, 1202, 1197, 1200, 1211, 1212, 1210, 1773,
     1214, 1222, 1224, 1210, 1228, 1241, 1222, 1223, 1222, 1237,
     1230, 1227, 1236, 1247, 1246, 1251, 1257, 1247, 1257, 1251,
     1254, 1267, 1258, 1264, 1269, 1260, 1274, 1263, 1259, 1265,
     1280, 1773, 1281, 1773, 1271, 1277, 1294, 1773, 1277, 1297,

     1292, 1305, 1302, 1283, 1297, 1298, 1292, 1310, 1311, 1307,
     1313, 1319, 1304, 1305, 1314, 1314, 1316, 1336, 1773, 1773,
     1319, 1330, 1773, 1330, 1331, 1773, 1342, 1334, 1353, 1350,
     1339, 1341, 1361, 1773, 1349, 1352, 1360, 1354, 1356, 1366,
     1352, 1773, 1352, 1362, 1374, 1376, 1773, 1376, 1383, 1382,
     1380, 1773, 1384, 1380, 1381, 1396, 1387, 1773, 1397, 1385,
     1399, 1396, 1393, 1407, 1773, 1773, 1411, 1398, 1412, 1416,
     1416, 1409, 1421, 1422, 1773, 1414, 1415, 1429, 1421, 1773,
     1422, 1419, 1419, 1434, 1439, 1431, 1431, 1445, 1428, 1443,
     1773, 1454, 1773, 1439, 1446, 1448, 1449, 1463, 1456, 1458,

     1773, 1773, 1459, 1471, 1472, 1773, 1773, 1773, 1466, 1773,
     1773, 1773, 1463, 1480, 1483, 1474,  131, 1489, 1482, 1773,
     1478, 1470, 1478, 1773, 1484, 1495, 1494, 1502, 1773, 1503,
     1491, 1504, 1773, 1509, 1773, 1500, 1497, 1503, 1773, 1773,
     1518, 1773, 1525, 1513, 1512, 1513, 1773, 1527, 1519, 1533,
     1773, 1533, 1527, 1526, 1552,  129, 1537, 1533, 1529, 1773,
     1536, 1548, 1546, 1548, 1773, 1773, 1559, 1549, 1773, 1547,
     1549, 1564, 1559, 1552, 1559, 1561, 1573, 1565, 1560, 1579,
     1773, 1570, 1568,   88, 1773, 1576, 1773, 1588, 1577, 1575,
     1581, 1582, 1597, 1773, 1590, 1600, 1593, 1773, 1600, 1773,

     1587, 1594, 1596, 1610, 1773, 1606, 1773, 1773, 1605, 1614,
     1619, 1627, 1773, 1773, 1773, 1616, 1614, 1619, 1626, 1633,
     1631, 1624, 1631, 1635, 1644, 1773, 1628, 1773, 1637, 1773,
     1638, 1638, 1640, 1644, 1636, 1649, 1645, 1662, 1773, 1668,
     1654, 1660, 1663, 1674, 1668, 1674, 1665, 1665, 1687, 1676,
     1678, 1679, 1773, 1681, 1773, 1689, 1679, 1687, 1696, 1690,
     1692, 1692, 1699, 1709, 1701, 1698, 1773, 1706, 1706, 1709,
     1705, 1773, 1773, 1716, 1711, 1773, 1773, 1773, 1773, 1768,
       87,   75, 1770
    } ;

static yyconst flex_int16_t yy_def[884] =
    {   0,
      879,    1,  879,  879,  879,  879,  880,  881,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  880,  879,  881,  882,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  882,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  883,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  883,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,    0,  879,
      879,  879,  879
    } ;

static yyconst flex_int16_t yy_nxt[1838] =
    {   0,
        4,    5,    6,    4,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,    4,    4,
       21,   22,   23,   24,   25,   26,   27,   28,   29,    4,
       30,   31,    4,    4,    4,   32,   33,   12,   13,   14,
       15,   16,   17,   18,   19,   20,    4,    4,   21,   22,
       23,   24,   25,   26,   27,   28,   29,    4,   30,   31,
        4,    4,    4,   34,   39,   40,   43,   44,   48,   46,
       41,   47,   45,   56,   65,  100,   73,   57,   66,   49,
       76,   58,   50,   59,  104,   63,  105,   37,   64,   58,
       85,   59,  785,   98,   67,   99,   48,   46,   41,   47,

       45,   56,   65,   60,   73,   57,   66,   49,   76,   61,
       50,   51,   74,   63,   52,   62,   64,   53,   85,   86,
       54,   98,   67,   99,   55,  181,   75,  182,   95,   87,
       77,   60,  755,  785,  259,  756,  110,   61,   96,   51,
       74,   97,   52,   62,   78,   53,   79,   86,   54,  182,
      111,  112,   55,   68,   75,   69,   95,   87,   77,  101,
       40,   70,   71,   72,  110,   45,   96,  113,   42,   97,
      102,  117,   78,   41,   79,  103,   43,   44,  111,  112,
      108,   68,   45,   69,  106,  118,  107,  109,  119,   70,
       71,   72,   80,   45,  120,  113,   81,  121,  124,  117,

       82,   41,  114,  103,  115,  116,   83,  122,  108,   84,
       45,  123,  106,  118,  107,  109,  119,  125,  182,  126,
       80,  129,  120,  259,   81,  121,  124,  127,   82,  130,
      114,  128,  115,  116,   83,  122,  133,   84,   88,  123,
      131,  132,  134,   89,   90,  125,   91,  126,  135,  129,
       92,   93,  138,  139,  140,  127,   94,  130,  136,  128,
      141,  137,  144,  145,  133,  146,   88,  149,  131,  132,
      134,   89,   90,  152,   91,  147,  135,  153,   92,   93,
      138,  139,  140,  142,   94,  150,  136,  151,  141,  137,
      144,  145,  143,  146,  148,  149,  154,  156,  157,  155,

      105,  152,  162,  147,  167,  153,  163,  168,  169,  165,
      158,  142,  170,  150,  173,  151,  174,  171,  177,  105,
      143,  159,  148,  164,  154,  156,  157,  155,  160,  166,
      162,  161,  167,  172,  163,  168,  169,  165,  158,  175,
      170,  178,  173,  179,  174,  171,  177,  176,  103,  159,
      183,  164,  180,  102,  184,  185,  160,  166,   45,  161,
      186,  172,  187,  188,  189,  190,  191,  175,  192,  178,
      193,  194,  195,  196,  197,  176,  103,  198,  183,  199,
      200,  201,  184,  185,  202,  204,   45,  205,  186,  203,
      187,  188,  189,  190,  191,  206,  192,  207,  193,  194,

      195,  196,  197,  208,  209,  198,  210,  199,  200,  201,
      211,  212,  202,  204,  213,  205,  214,  203,  215,  216,
      217,  218,  219,  206,  220,  207,  221,  222,  223,  224,
      225,  208,  209,  226,  210,  227,  228,  229,  211,  212,
      230,  231,  213,  232,  214,  233,  215,  216,  217,  218,
      219,  234,  220,  235,  221,  222,  223,  224,  225,  237,
      236,  226,  238,  227,  228,  229,  239,  240,  230,  231,
      241,  232,  242,  233,  243,  244,  245,  246,  247,  234,
      248,  235,  249,  250,  251,  252,  253,  237,  236,  254,
      238,  255,  256,  257,  239,  240,  258,  260,  241,  261,

      242,  262,  243,  244,  245,  246,  247,  263,  248,  264,
      249,  250,  251,  252,  253,  265,  266,  254,  179,  255,
      256,  257,  267,   45,  258,  260,  268,  261,  269,  262,
      270,  271,  272,  273,  274,  263,  275,  264,  276,  277,
      278,  279,  280,  265,  266,  281,  282,  283,  284,  285,
      267,   45,  286,  287,  268,  288,  269,  289,  270,  271,
      272,  273,  274,  290,  275,  291,  276,  277,  278,  279,
      280,  292,  293,  281,  282,  283,  284,  285,  294,  295,
      286,  287,  301,  288,  302,  289,  303,  304,  305,  306,
       59,  290,  307,  291,  308,  309,  310,   59,   42,  292,

      293,  311,  312,  313,  314,  315,  294,  295,  296,  297,
      301,  316,  302,  317,  303,  304,  305,  306,  298,  318,
      307,  319,  308,  309,  310,  299,  300,  320,  321,  311,
      312,  313,  314,  315,  322,  323,  296,  297,  324,  316,
      325,  317,  326,  327,  328,  329,  298,  318,  330,  319,
      331,  332,  333,  299,  300,  320,  321,  334,  335,  336,
      337,  338,  322,  323,  339,  340,  324,  341,  325,  342,
      326,  327,  328,  329,  343,  344,  330,  347,  331,  332,
      333,  345,  348,  349,  350,  334,  335,  336,  337,  338,
      351,  346,  339,  340,  352,  341,  353,  342,  354,  355,

      356,  357,  343,  344,  358,  347,  359,  363,  364,  345,
      348,  349,  350,  360,  361,  365,  366,  362,  351,  346,
      367,  368,  352,  369,  353,  370,  354,  355,  356,  357,
      371,  374,  358,  375,  359,  363,  364,  372,  376,  377,
      373,  360,  361,  365,  366,  362,  378,  379,  367,  368,
      380,  369,  381,  370,  382,  383,  384,  385,  371,  374,
      386,  375,  390,  387,  391,  372,  376,  377,  373,  392,
      393,  394,  395,  396,  378,  379,  388,  397,  380,  389,
      381,  398,  382,  383,  384,  385,  399,  400,  386,  401,
      390,  387,  391,  402,  405,  406,  407,  392,  393,  394,

      395,  396,  408,  403,  388,  397,  404,  389,  411,  398,
      409,  412,  415,  416,  399,  400,  410,  401,  417,  418,
      419,  402,  405,  406,  407,  413,  420,  421,  414,  422,
      408,  403,  423,  424,  404,  425,  411,  426,  409,  412,
      415,  416,  427,  428,  410,  429,  417,  418,  419,  432,
      430,  433,  434,  413,  420,  421,  414,  422,  435,  436,
      423,  424,  437,  425,  438,  426,  439,  440,  441,  442,
      427,  428,  431,  429,  443,  444,  445,  432,  430,  433,
      434,  446,  447,  448,  449,  450,  435,  436,  451,  454,
      437,  458,  438,  459,  439,  440,  441,  442,  452,  460,

      431,  453,  443,  444,  445,  461,  462,  463,  464,  446,
      447,  448,  449,  450,  465,  455,  451,  454,  456,  458,
      468,  459,  457,  466,  469,  470,  452,  460,  471,  453,
      472,  473,  467,  461,  462,  463,  464,  474,  475,  476,
      477,  478,  465,  455,  479,  480,  456,  481,  468,  482,
      457,  466,  469,  470,  483,  484,  471,  485,  472,  473,
      467,  486,  487,  488,  489,  474,  475,  476,  477,  478,
      493,  490,  479,  480,  491,  481,  494,  482,  495,  496,
      497,  498,  483,  484,  499,  485,  500,  492,  501,  486,
      487,  488,  489,  502,  503,  504,  505,  506,  493,  490,

      507,  508,  491,  509,  494,  510,  495,  496,  497,  498,
      511,  512,  499,  513,  500,  492,  501,  514,  515,  517,
      518,  502,  503,  504,  505,  506,  519,  520,  507,  508,
      521,  509,  522,  510,  516,  523,  524,  525,  511,  512,
      526,  513,  527,  528,  529,  514,  515,  517,  518,  530,
      531,  532,  533,  534,  519,  520,  535,  536,  521,  537,
      522,  538,  516,  523,  524,  525,  539,  540,  526,  541,
      527,  528,  529,  542,  543,  544,  545,  530,  531,  532,
      533,  534,  546,  547,  535,  536,  548,  537,  549,  538,
      550,  552,  553,  554,  539,  540,  555,  541,  556,  551,

      557,  542,  543,  544,  545,  558,  559,  560,  561,  562,
      546,  547,  563,  564,  548,  565,  549,  566,  550,  552,
      553,  554,  567,  568,  555,  569,  556,  551,  557,  570,
      571,  572,  573,  558,  559,  560,  561,  562,  574,  575,
      563,  564,  576,  565,  577,  566,  578,  579,  580,  581,
      567,  568,  582,  569,  583,  584,  585,  570,  571,  572,
      573,  586,  587,  588,  589,  590,  574,  575,  591,  592,
      576,  593,  577,  594,  578,  579,  580,  581,  595,  596,
      582,  597,  583,  584,  585,  598,  599,  600,  601,  586,
      587,  588,  589,  590,  602,  603,  591,  592,  604,  593,

      605,  594,  606,  607,  608,  609,  595,  596,  610,  597,
      611,  612,  613,  598,  599,  600,  601,  614,  615,  616,
      617,  618,  602,  603,  619,  620,  604,  621,  605,  622,
      606,  607,  608,  609,  623,  624,  610,  625,  611,  612,
      613,  626,  629,  630,  631,  614,  615,  616,  617,  618,
      632,  627,  619,  620,  628,  621,  633,  622,  634,  635,
      636,  637,  623,  624,  638,  625,  639,  640,  641,  626,
      629,  630,  631,  642,  643,  646,  644,  647,  632,  627,
      648,  649,  628,  650,  633,  651,  634,  635,  636,  637,
      652,  653,  638,  645,  639,  640,  641,  654,  655,  656,

      657,  642,  643,  646,  644,  647,  658,  659,  648,  649,
      660,  650,  661,  651,  662,  663,  664,  665,  652,  653,
      666,  645,  667,  668,  669,  654,  655,  656,  657,  670,
      671,  672,  673,  674,  658,  659,  675,  676,  660,  677,
      661,  680,  662,  663,  664,  665,  678,  681,  666,  679,
      667,  668,  669,  682,  683,  684,  685,  670,  671,  672,
      673,  674,  686,  687,  675,  676,  688,  677,  689,  680,
      690,  691,  692,  693,  678,  681,  694,  679,  695,  696,
      697,  682,  683,  684,  685,  698,  699,  700,  701,  702,
      686,  687,  703,  704,  688,  705,  689,  706,  690,  691,

      692,  693,  707,  708,  694,  709,  695,  696,  697,  710,
      711,  712,  713,  698,  699,  700,  701,  702,  714,  715,
      703,  704,  716,  705,  717,  706,  718,  719,  720,  721,
      707,  708,  722,  709,  723,  724,  725,  710,  711,  712,
      713,  726,  727,  728,  729,  730,  714,  715,  731,  732,
      716,  733,  717,  734,  718,  719,  720,  721,  735,  736,
      722,  737,  723,  724,  725,  738,  739,  740,  741,  726,
      727,  728,  729,  730,  742,  743,  731,  732,  744,  733,
      745,  734,  746,  747,  748,  749,  735,  736,  750,  737,
      751,  752,  753,  738,  739,  740,  741,  754,  757,  758,

      759,  760,  742,  743,  761,  762,  744,  763,  745,  764,
      746,  747,  748,  749,  765,  766,  750,  767,  751,  752,
      753,  768,  769,  770,  771,  754,  757,  758,  759,  760,
      772,  773,  761,  762,  774,  763,  775,  764,  776,  777,
      778,  779,  765,  766,  780,  767,  781,  782,  783,  768,
      769,  770,  771,  755,  786,  787,  756,  788,  772,  773,
      789,  790,  774,  791,  775,  792,  776,  777,  778,  779,
      793,  794,  780,  795,  781,  782,  783,  796,  797,  798,
      799,  800,  786,  787,  801,  788,  802,  803,  789,  790,
      804,  791,  805,  792,  806,  807,  808,  809,  793,  794,

      810,  795,  811,  812,  813,  796,  797,  798,  799,  800,
      814,  815,  801,  816,  802,  803,  817,  818,  804,  819,
      805,  820,  806,  807,  808,  809,  821,  822,  810,  823,
      811,  812,  813,  824,  825,  826,  827,  828,  814,  815,
      829,  816,  830,  831,  817,  818,  832,  819,  833,  820,
      834,  835,  836,  837,  821,  822,  838,  823,  839,  840,
      841,  824,  825,  826,  827,  828,  842,  843,  829,  844,
      830,  831,  845,  846,  832,  847,  833,  848,  834,  835,
      836,  837,  849,  850,  838,  851,  839,  840,  841,  852,
      853,  854,  855,  856,  842,  843,  857,  844,  858,  859,

      845,  846,  860,  847,  861,  848,  862,  863,  864,  865,
      849,  850,  866,  851,  867,  868,  869,  852,  853,  854,
      855,  856,  870,  871,  857,  872,  858,  859,  873,  874,
      860,  875,  861,  876,  862,  863,  864,  865,  877,  878,
      866,   36,  867,  868,  869,   42,   38,   36,  879,  879,
      870,  871,  879,  872,  879,  879,  873,  874,  879,  875,
      879,  876,  879,  879,  879,  879,  877,  878,   35,   35,
      784,  784,    3,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879
    } ;

static yyconst flex_int16_t yy_chk[1838] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,    9,   11,   11,   13,   12,
        9,   12,   11,   15,   18,  882,   21,   15,   19,   13,
       23,   41,   13,   41,   45,   17,   45,  881,   17,   16,
       26,   16,  784,   30,   19,   31,   13,   12,    9,   12,

       11,   15,   18,   16,   21,   15,   19,   13,   23,   16,
       13,   14,   22,   17,   14,   16,   17,   14,   26,   27,
       14,   30,   19,   31,   14,  103,   22,  103,   29,   27,
       24,   16,  717,  756,  259,  717,   48,   16,   29,   14,
       22,   29,   14,   16,   24,   14,   24,   27,   14,  182,
       49,   50,   14,   20,   22,   20,   29,   27,   24,   40,
       40,   20,   20,   20,   48,   40,   29,   51,   42,   29,
       43,   53,   24,   42,   24,   43,   44,   44,   49,   50,
       47,   20,   44,   20,   46,   54,   46,   47,   55,   20,
       20,   20,   25,   40,   56,   51,   25,   56,   57,   53,

       25,   42,   52,   43,   52,   52,   25,   56,   47,   25,
       44,   56,   46,   54,   46,   47,   55,   60,  181,   61,
       25,   63,   56,  180,   25,   56,   57,   62,   25,   64,
       52,   62,   52,   52,   25,   56,   66,   25,   28,   56,
       65,   65,   67,   28,   28,   60,   28,   61,   68,   63,
       28,   28,   70,   71,   72,   62,   28,   64,   69,   62,
       73,   69,   75,   76,   66,   77,   28,   79,   65,   65,
       67,   28,   28,   81,   28,   78,   68,   82,   28,   28,
       70,   71,   72,   74,   28,   80,   69,   80,   73,   69,
       75,   76,   74,   77,   78,   79,   83,   84,   85,   83,

      105,   81,   87,   78,   90,   82,   88,   91,   92,   89,
       86,   74,   93,   80,   95,   80,   96,   94,   98,  104,
       74,   86,   78,   88,   83,   84,   85,   83,   86,   89,
       87,   86,   90,   94,   88,   91,   92,   89,   86,   97,
       93,   99,   95,  101,   96,   94,   98,   97,  101,   86,
      106,   88,  102,  102,  107,  108,   86,   89,  102,   86,
      109,   94,  110,  111,  112,  113,  114,   97,  115,   99,
      115,  116,  117,  118,  119,   97,  101,  120,  106,  121,
      122,  123,  107,  108,  124,  125,  102,  126,  109,  124,
      110,  111,  112,  113,  114,  127,  115,  128,  115,  116,

      117,  118,  119,  129,  130,  120,  131,  121,  122,  123,
      132,  133,  124,  125,  134,  126,  135,  124,  136,  137,
      138,  139,  140,  127,  141,  128,  142,  143,  144,  145,
      146,  129,  130,  147,  131,  148,  149,  150,  132,  133,
      151,  152,  134,  153,  135,  154,  136,  137,  138,  139,
      140,  155,  141,  156,  142,  143,  144,  145,  146,  157,
      156,  147,  158,  148,  149,  150,  159,  160,  151,  152,
      161,  153,  162,  154,  163,  164,  165,  166,  167,  155,
      168,  156,  169,  170,  171,  172,  173,  157,  156,  174,
      158,  175,  176,  177,  159,  160,  178,  183,  161,  184,

      162,  185,  163,  164,  165,  166,  167,  186,  168,  187,
      169,  170,  171,  172,  173,  188,  189,  174,  179,  175,
      176,  177,  190,  179,  178,  183,  191,  184,  192,  185,
      194,  195,  196,  197,  198,  186,  199,  187,  200,  201,
      203,  204,  205,  188,  189,  206,  207,  208,  209,  210,
      190,  179,  211,  212,  191,  213,  192,  214,  194,  195,
      196,  197,  198,  215,  199,  216,  200,  201,  203,  204,
      205,  217,  218,  206,  207,  208,  209,  210,  219,  220,
      211,  212,  222,  213,  223,  214,  224,  225,  226,  227,
       59,  215,  228,  216,  229,  230,  231,   58,   39,  217,

      218,  232,  233,  234,  235,  236,  219,  220,  221,  221,
      222,  237,  223,  238,  224,  225,  226,  227,  221,  239,
      228,  240,  229,  230,  231,  221,  221,  241,  242,  232,
      233,  234,  235,  236,  243,  244,  221,  221,  245,  237,
      246,  238,  247,  249,  250,  251,  221,  239,  252,  240,
      253,  254,  255,  221,  221,  241,  242,  256,  257,  258,
      260,  261,  243,  244,  262,  263,  245,  265,  246,  267,
      247,  249,  250,  251,  268,  269,  252,  271,  253,  254,
      255,  270,  272,  273,  274,  256,  257,  258,  260,  261,
      275,  270,  262,  263,  276,  265,  277,  267,  278,  279,

      280,  281,  268,  269,  282,  271,  283,  285,  286,  270,
      272,  273,  274,  284,  284,  288,  289,  284,  275,  270,
      290,  292,  276,  293,  277,  294,  278,  279,  280,  281,
      295,  297,  282,  298,  283,  285,  286,  296,  299,  300,
      296,  284,  284,  288,  289,  284,  302,  303,  290,  292,
      304,  293,  305,  294,  306,  307,  308,  309,  295,  297,
      310,  298,  312,  311,  313,  296,  299,  300,  296,  314,
      315,  316,  317,  318,  302,  303,  311,  319,  304,  311,
      305,  320,  306,  307,  308,  309,  321,  323,  310,  324,
      312,  311,  313,  325,  328,  329,  330,  314,  315,  316,

      317,  318,  331,  327,  311,  319,  327,  311,  334,  320,
      333,  335,  337,  338,  321,  323,  333,  324,  339,  340,
      342,  325,  328,  329,  330,  336,  343,  344,  336,  345,
      331,  327,  346,  347,  327,  349,  334,  350,  333,  335,
      337,  338,  351,  352,  333,  353,  339,  340,  342,  356,
      354,  357,  358,  336,  343,  344,  336,  345,  360,  361,
      346,  347,  362,  349,  363,  350,  364,  365,  366,  367,
      351,  352,  354,  353,  368,  370,  371,  356,  354,  357,
      358,  372,  373,  374,  375,  376,  360,  361,  377,  379,
      362,  381,  363,  383,  364,  365,  366,  367,  378,  384,

      354,  378,  368,  370,  371,  385,  386,  387,  388,  372,
      373,  374,  375,  376,  389,  380,  377,  379,  380,  381,
      391,  383,  380,  390,  392,  393,  378,  384,  394,  378,
      395,  396,  390,  385,  386,  387,  388,  397,  398,  400,
      401,  402,  389,  380,  403,  404,  380,  406,  391,  407,
      380,  390,  392,  393,  408,  409,  394,  410,  395,  396,
      390,  411,  412,  413,  414,  397,  398,  400,  401,  402,
      416,  415,  403,  404,  415,  406,  417,  407,  418,  419,
      420,  421,  408,  409,  422,  410,  423,  415,  424,  411,
      412,  413,  414,  425,  427,  428,  429,  430,  416,  415,

      431,  432,  415,  433,  417,  434,  418,  419,  420,  421,
      435,  436,  422,  437,  423,  415,  424,  438,  439,  440,
      441,  425,  427,  428,  429,  430,  443,  444,  431,  432,
      445,  433,  446,  434,  439,  447,  448,  449,  435,  436,
      450,  437,  451,  452,  453,  438,  439,  440,  441,  455,
      456,  457,  459,  460,  443,  444,  461,  462,  445,  463,
      446,  464,  439,  447,  448,  449,  465,  466,  450,  467,
      451,  452,  453,  469,  470,  471,  472,  455,  456,  457,
      459,  460,  473,  474,  461,  462,  475,  463,  476,  464,
      477,  479,  480,  481,  465,  466,  483,  467,  484,  477,

      485,  469,  470,  471,  472,  486,  488,  489,  490,  491,
      473,  474,  492,  493,  475,  494,  476,  495,  477,  479,
      480,  481,  496,  497,  483,  498,  484,  477,  485,  499,
      500,  501,  503,  486,  488,  489,  490,  491,  504,  505,
      492,  493,  506,  494,  507,  495,  508,  511,  512,  514,
      496,  497,  515,  498,  517,  519,  521,  499,  500,  501,
      503,  522,  524,  525,  526,  527,  504,  505,  528,  529,
      506,  530,  507,  531,  508,  511,  512,  514,  532,  533,
      515,  534,  517,  519,  521,  535,  536,  537,  538,  522,
      524,  525,  526,  527,  539,  540,  528,  529,  541,  530,

      542,  531,  543,  545,  546,  547,  532,  533,  547,  534,
      548,  549,  550,  535,  536,  537,  538,  551,  552,  554,
      555,  556,  539,  540,  557,  558,  541,  559,  542,  561,
      543,  545,  546,  547,  562,  563,  547,  564,  548,  549,
      550,  565,  567,  568,  569,  551,  552,  554,  555,  556,
      570,  566,  557,  558,  566,  559,  571,  561,  572,  573,
      574,  575,  562,  563,  576,  564,  577,  578,  579,  565,
      567,  568,  569,  580,  581,  583,  582,  584,  570,  566,
      585,  586,  566,  587,  571,  588,  572,  573,  574,  575,
      589,  590,  576,  582,  577,  578,  579,  591,  593,  595,

      596,  580,  581,  583,  582,  584,  597,  599,  585,  586,
      600,  587,  601,  588,  602,  603,  604,  605,  589,  590,
      606,  582,  607,  608,  609,  591,  593,  595,  596,  610,
      611,  612,  613,  614,  597,  599,  615,  616,  600,  617,
      601,  621,  602,  603,  604,  605,  618,  622,  606,  618,
      607,  608,  609,  624,  625,  627,  628,  610,  611,  612,
      613,  614,  629,  630,  615,  616,  631,  617,  632,  621,
      633,  635,  636,  637,  618,  622,  638,  618,  639,  640,
      641,  624,  625,  627,  628,  643,  644,  645,  646,  648,
      629,  630,  649,  650,  631,  651,  632,  653,  633,  635,

      636,  637,  654,  655,  638,  656,  639,  640,  641,  657,
      659,  660,  661,  643,  644,  645,  646,  648,  662,  663,
      649,  650,  664,  651,  667,  653,  668,  669,  670,  671,
      654,  655,  672,  656,  673,  674,  676,  657,  659,  660,
      661,  677,  678,  679,  681,  682,  662,  663,  683,  684,
      664,  685,  667,  686,  668,  669,  670,  671,  687,  688,
      672,  689,  673,  674,  676,  690,  692,  694,  695,  677,
      678,  679,  681,  682,  696,  697,  683,  684,  698,  685,
      699,  686,  700,  703,  704,  705,  687,  688,  709,  689,
      713,  714,  715,  690,  692,  694,  695,  716,  718,  719,

      721,  722,  696,  697,  723,  725,  698,  726,  699,  727,
      700,  703,  704,  705,  728,  730,  709,  731,  713,  714,
      715,  732,  734,  736,  737,  716,  718,  719,  721,  722,
      738,  741,  723,  725,  743,  726,  744,  727,  745,  746,
      748,  749,  728,  730,  750,  731,  752,  753,  754,  732,
      734,  736,  737,  755,  757,  758,  755,  759,  738,  741,
      761,  762,  743,  763,  744,  764,  745,  746,  748,  749,
      767,  768,  750,  770,  752,  753,  754,  771,  772,  773,
      774,  775,  757,  758,  776,  759,  777,  778,  761,  762,
      779,  763,  780,  764,  782,  783,  786,  788,  767,  768,

      789,  770,  790,  791,  792,  771,  772,  773,  774,  775,
      793,  795,  776,  796,  777,  778,  797,  799,  779,  801,
      780,  802,  782,  783,  786,  788,  803,  804,  789,  806,
      790,  791,  792,  809,  810,  811,  812,  816,  793,  795,
      817,  796,  818,  819,  797,  799,  820,  801,  821,  802,
      822,  823,  824,  825,  803,  804,  827,  806,  829,  831,
      832,  809,  810,  811,  812,  816,  833,  834,  817,  835,
      818,  819,  836,  837,  820,  838,  821,  840,  822,  823,
      824,  825,  841,  842,  827,  843,  829,  831,  832,  844,
      845,  846,  847,  848,  833,  834,  849,  835,  850,  851,

      836,  837,  852,  838,  854,  840,  856,  857,  858,  859,
      841,  842,  860,  843,  861,  862,  863,  844,  845,  846,
      847,  848,  864,  865,  849,  866,  850,  851,  868,  869,
      852,  870,  854,  871,  856,  857,  858,  859,  874,  875,
      860,   35,  861,  862,  863,   10,    8,    7,    3,    0,
      864,  865,    0,  866,    0,    0,  868,  869,    0,  870,
        0,  871,    0,    0,    0,    0,  874,  875,  880,  880,
      883,  883,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int rib_flex_debug;
int rib_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *ribtext;
#line 1 "rib.l"
#line 2 "rib.l"
// Saves information about a rib file
typedef struct TRibFile {
	int				ribLineno;
	const char		*ribFile;
	YY_BUFFER_STATE	ribState;
	TRibFile		*next;
} TRibFile;

static	TRibFile	*ribStack	=	NULL;

// Tell flex how to define riblex for pure parser
#undef YY_DECL
#define YY_DECL int riblex(YYSTYPE *yylval )

#ifdef HAVE_ZLIB

// Overwrite the YYinput so that it uses libz
#undef YY_INPUT
#define YY_INPUT(buf, retval, maxlen)	if ( (retval = gzread(ribin,buf,maxlen)) < 0) 			\
											YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

#line 1192 "lex.rib.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int riblex_destroy (void );

int ribget_debug (void );

void ribset_debug (int debug_flag  );

YY_EXTRA_TYPE ribget_extra (void );

void ribset_extra (YY_EXTRA_TYPE user_defined  );

FILE *ribget_in (void );

void ribset_in  (FILE * in_str  );

FILE *ribget_out (void );

void ribset_out  (FILE * out_str  );

yy_size_t ribget_leng (void );

char *ribget_text (void );

int ribget_lineno (void );

void ribset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ribwrap (void );
#else
extern int ribwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( ribtext, ribleng, 1, ribout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( ribin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( ribin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, ribin))==0 && ferror(ribin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(ribin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int riblex (void);

#define YY_DECL int riblex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after ribtext and ribleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 28 "rib.l"

#line 1376 "lex.rib.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! ribin )
			ribin = stdin;

		if ( ! ribout )
			ribout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			ribensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				rib_create_buffer(ribin,YY_BUF_SIZE );
		}

		rib_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of ribtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 880 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 879 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 29 "rib.l"
return RIB_DECLARE;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 30 "rib.l"
return RIB_FRAME_BEGIN;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 31 "rib.l"
return RIB_FRAME_END;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 32 "rib.l"
return RIB_WORLD_BEGIN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 33 "rib.l"
return RIB_WORLD_END;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 34 "rib.l"
return RIB_FORMAT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 35 "rib.l"
return RIB_FRAME_ASPECT_RATIO;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 36 "rib.l"
return RIB_SCREEN_WINDOW;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 37 "rib.l"
return RIB_CROP_WINDOW;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 "rib.l"
return RIB_PROJECTION;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 "rib.l"
return RIB_CLIPPING;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 40 "rib.l"
return RIB_CLIPPING_PLANE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 41 "rib.l"
return RIB_DEPTH_OF_FIELD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 42 "rib.l"
return RIB_SHUTTER;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 43 "rib.l"
return RIB_PIXEL_VARIANCE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 44 "rib.l"
return RIB_PIXEL_SAMPLES;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 45 "rib.l"
return RIB_PIXEL_FILTER;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 46 "rib.l"
return RIB_EXPOSURE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 47 "rib.l"
return RIB_IMAGER;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 48 "rib.l"
return RIB_QUANTIZE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 49 "rib.l"
return RIB_DISPLAY;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 50 "rib.l"
return RIB_DISPLAYCHANNEL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 51 "rib.l"
return RIB_HIDER;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 52 "rib.l"
return RIB_COLOR_SAMPLES;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 53 "rib.l"
return RIB_RELATIVE_DETAIL;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 54 "rib.l"
return RIB_OPTION;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 56 "rib.l"
return RIB_ATTRIBUTE_BEGIN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 57 "rib.l"
return RIB_ATTRIBUTE_END;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 58 "rib.l"
return RIB_COLOR;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 59 "rib.l"
return RIB_OPACITY;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 60 "rib.l"
return RIB_TEXTURE_COORDINATES;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 61 "rib.l"
return RIB_LIGHT_SOURCE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 62 "rib.l"
return RIB_AREA_LIGHT_SOURCE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 63 "rib.l"
return RIB_ILLUMINATE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 64 "rib.l"
return RIB_SURFACE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 65 "rib.l"
return RIB_ATMOSPHERE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 66 "rib.l"
return RIB_INTERIOR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 67 "rib.l"
return RIB_EXTERIOR;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 68 "rib.l"
return RIB_SHADING_RATE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 69 "rib.l"
return RIB_SHADING_INTERPOLATION;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 70 "rib.l"
return RIB_MATTE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 71 "rib.l"
return RIB_BOUND;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 72 "rib.l"
return RIB_DETAIL;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 73 "rib.l"
return RIB_DETAIL_RANGE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 74 "rib.l"
return RIB_GEOMETRIC_APPROXIMATION;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 75 "rib.l"
return RIB_GEOMETRIC_REPRESENTATION;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 76 "rib.l"
return RIB_ORIENTATION;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 77 "rib.l"
return RIB_REVERSE_ORIENTATION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 78 "rib.l"
return RIB_SIDES;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 80 "rib.l"
return RIB_IDENTITY;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 81 "rib.l"
return RIB_TRANSFORM;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 82 "rib.l"
return RIB_CONCAT_TRANSFORM;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 83 "rib.l"
return RIB_PERSPECTIVE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 84 "rib.l"
return RIB_TRANSLATE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 85 "rib.l"
return RIB_ROTATE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 86 "rib.l"
return RIB_SCALE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 87 "rib.l"
return RIB_SKEW;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 88 "rib.l"
return RIB_DEFORMATION;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 89 "rib.l"
return RIB_DISPLACEMENT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 90 "rib.l"
return RIB_COORDINATE_SYSTEM;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 91 "rib.l"
return RIB_COORDINATE_SYS_TRANSFORM;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 93 "rib.l"
return RIB_TRANSFORM_BEGIN;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 94 "rib.l"
return RIB_TRANSFORM_END;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 96 "rib.l"
return RIB_ATTRIBUTE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 98 "rib.l"
return RIB_POLYGON;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 99 "rib.l"
return RIB_GENERAL_POLYGON;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 100 "rib.l"
return RIB_POINTS_POLYGONS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 101 "rib.l"
return RIB_POINTS_GENERAL_POLYGONS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 102 "rib.l"
return RIB_BASIS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 103 "rib.l"
return RIB_PATCH;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 104 "rib.l"
return RIB_PATCH_MESH;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 105 "rib.l"
return RIB_NU_PATCH;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 106 "rib.l"
return RIB_TRIM_CURVE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 108 "rib.l"
return RIB_SPHERE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 109 "rib.l"
return RIB_CONE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 110 "rib.l"
return RIB_CYLINDER;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 111 "rib.l"
return RIB_HYPERBOLOID;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 112 "rib.l"
return RIB_PARABOLOID;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 113 "rib.l"
return RIB_DISK;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 114 "rib.l"
return RIB_TORUS;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 115 "rib.l"
return RIB_CURVES;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 116 "rib.l"
return RIB_POINTS;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 117 "rib.l"
return RIB_SUBDIVISION_MESH;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 118 "rib.l"
return RIB_BLOBBY;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 119 "rib.l"
return RIB_GEOMETRY;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 121 "rib.l"
return RIB_PROCEDURAL;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 123 "rib.l"
return RIB_SOLID_BEGIN;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 124 "rib.l"
return RIB_SOLID_END;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 126 "rib.l"
return RIB_OBJECT_BEGIN;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 127 "rib.l"
return RIB_OBJECT_END;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 129 "rib.l"
return RIB_OBJECT_INSTANCE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 131 "rib.l"
return RIB_MOTION_BEGIN;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 132 "rib.l"
return RIB_MOTION_END;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 134 "rib.l"
return RIB_MAKE_TEXTURE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 135 "rib.l"
return RIB_MAKE_BRICKMAP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 136 "rib.l"
return RIB_MAKE_BUMP;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 137 "rib.l"
return RIB_MAKE_LAT_LONG_ENVIRONMENT;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 138 "rib.l"
return RIB_MAKE_CUBE_FACE_ENVIRONMENT;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 139 "rib.l"
return RIB_MAKE_SHADOW;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 141 "rib.l"
return RIB_ARCHIVE_RECORD;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 143 "rib.l"
return RIB_ARCHIVE_BEGIN;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 144 "rib.l"
return RIB_ARCHIVE_END;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 146 "rib.l"
return RIB_RESOURCE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 147 "rib.l"
return RIB_RESOURCE_BEGIN;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 148 "rib.l"
return RIB_RESOURCE_END;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 150 "rib.l"
return RIB_IFBEGIN;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 151 "rib.l"
return RIB_IFEND;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 152 "rib.l"
return RIB_ELSEIF;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 153 "rib.l"
return RIB_ELSE;
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 156 "rib.l"
{
														char			fileName[256];
														char			*start	=	strchr(ribtext,'\"');
														char			location[OS_MAX_PATH_LENGTH];
														COptions		*options;

														assert(start != NULL);

														strcpy(fileName,start+1);

														fileName[strlen(fileName)-1]	=	'\0';

														options		=	CRenderer::context->getOptions();

														if (CRenderer::locateFile(location,fileName,options->archivePath) == TRUE) {
															FILE	*in;

															info(CODE_RESOLUTION,"\"%s\" -> \"%s\"\n",fileName,location);

#ifdef HAVE_ZLIB
															in = (FILE *) gzopen( location, "r" );
#else
															in = fopen( location, "r" );
#endif

															if (in != NULL) {
																TRibFile	*newFile	=	new TRibFile;

																newFile->ribLineno		=	ribLineno;
																newFile->ribState		=	YY_CURRENT_BUFFER;
																newFile->ribFile		=	ribFile;
																newFile->next			=	ribStack;
																ribStack				=	newFile;

																ribFile					=	strdup(fileName);
																ribLineno				=	1;																
																ribin					=	in;
																rib_switch_to_buffer(rib_create_buffer( ribin, YY_BUF_SIZE ) );
																BEGIN(INITIAL);
															} else {
																error(CODE_NOFILE,"Failed to open \"%s\"\n",location);
															}
														} else {
															error(CODE_NOFILE,"Failed to find \"%s(.rib)\"\n",fileName);
														}
													}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 203 "rib.l"
return RIB_ERROR_HANDLER;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 205 "rib.l"
return RIB_VERSION;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 206 "rib.l"
return RIB_VERSION_STRING;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 208 "rib.l"
return RIB_ARRAY_BEGIN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 209 "rib.l"
return RIB_ARRAY_END;
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 211 "rib.l"
{   riblval->string	=	rstrdup(ribtext+1,CRenderer::globalMemory);	riblval->string[strlen(riblval->string)-1] = '\0'; return RIB_TEXT;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 212 "rib.l"
{	/*sscanf(ribtext,"%f",&riblval->real);*/ riblval->real = (float) atof(ribtext); return RIB_FLOAT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 213 "rib.l"
{	/*sscanf(ribtext,"%f",&riblval->real);*/ riblval->real = (float) atof(ribtext); return RIB_FLOAT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 215 "rib.l"
;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 216 "rib.l"
{	riblval->string	=	rstrdup(ribtext+2,CRenderer::globalMemory);	return RIB_STRUCTURE_COMMENT;	}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 217 "rib.l"
;
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 218 "rib.l"
{	ribLineno++; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 219 "rib.l"
{
														if (ribStack == NULL) {
															yyterminate();
														} else 	{
															TRibFile	*nextFile	=	ribStack->next;
															rib_delete_buffer( YY_CURRENT_BUFFER );
#ifdef HAVE_ZLIB
															gzclose(ribin);
#else
															fclose(ribin);
#endif
															free((char *) ribFile);
															rib_switch_to_buffer(ribStack->ribState);
															ribLineno	=	ribStack->ribLineno;
															ribFile		=	ribStack->ribFile;
															delete ribStack;
															ribStack	=	nextFile;
														}
													}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 238 "rib.l"
{	// Terminate parsing for a runprogram
														if (ribStack == NULL) {
															yyterminate();
														} else 	{
															TRibFile	*nextFile	=	ribStack->next;
															rib_delete_buffer( YY_CURRENT_BUFFER );
															
#ifdef HAVE_ZLIB
															gzclose(ribin);
#else
															fclose(ribin);
#endif

															free((char *) ribFile);
															rib_switch_to_buffer(ribStack->ribState);
															ribLineno	=	ribStack->ribLineno;
															ribFile		=	ribStack->ribFile;
															delete ribStack;
															ribStack	=	nextFile;
														}
													}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 259 "rib.l"
ECHO;
	YY_BREAK
#line 2165 "lex.rib.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed ribin at a new source and called
			 * riblex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = ribin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( ribwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * ribtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of riblex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ribrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			ribrestart(ribin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ribrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 880 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 880 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 879);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up ribtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					ribrestart(ribin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ribwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve ribtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void ribrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        ribensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            rib_create_buffer(ribin,YY_BUF_SIZE );
	}

	rib_init_buffer(YY_CURRENT_BUFFER,input_file );
	rib_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void rib_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		ribpop_buffer_state();
	 *		ribpush_buffer_state(new_buffer);
     */
	ribensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	rib_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (ribwrap()) processing, but the only time this flag
	 * is looked at is after ribwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void rib_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	ribin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE rib_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) riballoc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rib_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) riballoc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in rib_create_buffer()" );

	b->yy_is_our_buffer = 1;

	rib_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with rib_create_buffer()
 * 
 */
    void rib_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ribfree((void *) b->yy_ch_buf  );

	ribfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a ribrestart() or at EOF.
 */
    static void rib_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	rib_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then rib_init_buffer was _probably_
     * called from ribrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void rib_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		rib_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void ribpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	ribensure_buffer_stack();

	/* This block is copied from rib_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from rib_switch_to_buffer. */
	rib_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void ribpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	rib_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		rib_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void ribensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)riballoc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in ribensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)ribrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in ribensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE rib_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) riballoc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rib_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	rib_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to riblex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       rib_scan_bytes() instead.
 */
YY_BUFFER_STATE rib_scan_string (yyconst char * yystr )
{
    
	return rib_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to riblex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE rib_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) riballoc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in rib_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = rib_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in rib_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up ribtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		ribtext[ribleng] = (yy_hold_char); \
		(yy_c_buf_p) = ribtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		ribleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int ribget_lineno  (void)
{
        
    return riblineno;
}

/** Get the input stream.
 * 
 */
FILE *ribget_in  (void)
{
        return ribin;
}

/** Get the output stream.
 * 
 */
FILE *ribget_out  (void)
{
        return ribout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t ribget_leng  (void)
{
        return ribleng;
}

/** Get the current token.
 * 
 */

char *ribget_text  (void)
{
        return ribtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void ribset_lineno (int  line_number )
{
    
    riblineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see rib_switch_to_buffer
 */
void ribset_in (FILE *  in_str )
{
        ribin = in_str ;
}

void ribset_out (FILE *  out_str )
{
        ribout = out_str ;
}

int ribget_debug  (void)
{
        return rib_flex_debug;
}

void ribset_debug (int  bdebug )
{
        rib_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from riblex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    ribin = stdin;
    ribout = stdout;
#else
    ribin = (FILE *) 0;
    ribout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * riblex_init()
     */
    return 0;
}

/* riblex_destroy is for both reentrant and non-reentrant scanners. */
int riblex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		rib_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		ribpop_buffer_state();
	}

	/* Destroy the stack itself. */
	ribfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * riblex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *riballoc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *ribrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ribfree (void * ptr )
{
	free( (char *) ptr );	/* see ribrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 259 "rib.l"



